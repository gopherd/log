// Auto-generated by gen.go, DON'T EDIT IT!
package log

import "strconv"

type Ints []int
type Int8s []int8
type Int16s []int16
type Int32s []int32
type Int64s []int64
type Uints []uint
type Uint8s []uint8
type Uint16s []uint16
type Uint32s []uint32
type Uint64s []uint64
type Float32s []float32
type Float64s []float64
type Complex64s []complex64
type Complex128s []complex128
type Bools []bool
type Strings []string
type Bytes []byte

func (s Ints) AppendFormat(buf []byte) []byte {
	buf = append(buf, '[')
	for i := range s {
		if i > 0 {
			buf = append(buf, ',')
		}
		buf = strconv.AppendInt(buf, int64(s[i]), 10)
	}
	buf = append(buf, ']')
	return buf
}

func (s Int8s) AppendFormat(buf []byte) []byte {
	buf = append(buf, '[')
	for i := range s {
		if i > 0 {
			buf = append(buf, ',')
		}
		buf = strconv.AppendInt(buf, int64(s[i]), 10)
	}
	buf = append(buf, ']')
	return buf
}

func (s Int16s) AppendFormat(buf []byte) []byte {
	buf = append(buf, '[')
	for i := range s {
		if i > 0 {
			buf = append(buf, ',')
		}
		buf = strconv.AppendInt(buf, int64(s[i]), 10)
	}
	buf = append(buf, ']')
	return buf
}

func (s Int32s) AppendFormat(buf []byte) []byte {
	buf = append(buf, '[')
	for i := range s {
		if i > 0 {
			buf = append(buf, ',')
		}
		buf = strconv.AppendInt(buf, int64(s[i]), 10)
	}
	buf = append(buf, ']')
	return buf
}

func (s Int64s) AppendFormat(buf []byte) []byte {
	buf = append(buf, '[')
	for i := range s {
		if i > 0 {
			buf = append(buf, ',')
		}
		buf = strconv.AppendInt(buf, int64(s[i]), 10)
	}
	buf = append(buf, ']')
	return buf
}

func (s Uints) AppendFormat(buf []byte) []byte {
	buf = append(buf, '[')
	for i := range s {
		if i > 0 {
			buf = append(buf, ',')
		}
		buf = strconv.AppendUint(buf, uint64(s[i]), 10)
	}
	buf = append(buf, ']')
	return buf
}

func (s Uint8s) AppendFormat(buf []byte) []byte {
	buf = append(buf, '[')
	for i := range s {
		if i > 0 {
			buf = append(buf, ',')
		}
		buf = strconv.AppendUint(buf, uint64(s[i]), 10)
	}
	buf = append(buf, ']')
	return buf
}

func (s Uint16s) AppendFormat(buf []byte) []byte {
	buf = append(buf, '[')
	for i := range s {
		if i > 0 {
			buf = append(buf, ',')
		}
		buf = strconv.AppendUint(buf, uint64(s[i]), 10)
	}
	buf = append(buf, ']')
	return buf
}

func (s Uint32s) AppendFormat(buf []byte) []byte {
	buf = append(buf, '[')
	for i := range s {
		if i > 0 {
			buf = append(buf, ',')
		}
		buf = strconv.AppendUint(buf, uint64(s[i]), 10)
	}
	buf = append(buf, ']')
	return buf
}

func (s Uint64s) AppendFormat(buf []byte) []byte {
	buf = append(buf, '[')
	for i := range s {
		if i > 0 {
			buf = append(buf, ',')
		}
		buf = strconv.AppendUint(buf, uint64(s[i]), 10)
	}
	buf = append(buf, ']')
	return buf
}

func (s Float32s) AppendFormat(buf []byte) []byte {
	buf = append(buf, '[')
	for i := range s {
		if i > 0 {
			buf = append(buf, ',')
		}
		buf = strconv.AppendFloat(buf, float64(s[i]), 'f', -1, 32)
	}
	buf = append(buf, ']')
	return buf
}

func (s Float64s) AppendFormat(buf []byte) []byte {
	buf = append(buf, '[')
	for i := range s {
		if i > 0 {
			buf = append(buf, ',')
		}
		buf = strconv.AppendFloat(buf, float64(s[i]), 'f', -1, 64)
	}
	buf = append(buf, ']')
	return buf
}

func (s Complex64s) AppendFormat(buf []byte) []byte {
	buf = append(buf, '[')
	for i := range s {
		if i > 0 {
			buf = append(buf, ',')
		}
		re, im := float64(real(s[i])), float64(imag(s[i]))
		if re != 0 {
			buf = strconv.AppendFloat(buf, re, 'f', -1, 32)
		}
		if im != 0 {
			if re != 0 {
				buf = append(buf, '+')
			}
			buf = strconv.AppendFloat(buf, im, 'f', -1, 32)
			buf = append(buf, 'i')
		} else if re == 0 {
			buf = append(buf, '0')
		}
	}
	buf = append(buf, ']')
	return buf
}

func (s Complex128s) AppendFormat(buf []byte) []byte {
	buf = append(buf, '[')
	for i := range s {
		if i > 0 {
			buf = append(buf, ',')
		}
		re, im := float64(real(s[i])), float64(imag(s[i]))
		if re != 0 {
			buf = strconv.AppendFloat(buf, re, 'f', -1, 64)
		}
		if im != 0 {
			if re != 0 {
				buf = append(buf, '+')
			}
			buf = strconv.AppendFloat(buf, im, 'f', -1, 64)
			buf = append(buf, 'i')
		} else if re == 0 {
			buf = append(buf, '0')
		}
	}
	buf = append(buf, ']')
	return buf
}

func (s Bools) AppendFormat(buf []byte) []byte {
	buf = append(buf, '[')
	for i := range s {
		if i > 0 {
			buf = append(buf, ',')
		}
		buf = strconv.AppendBool(buf, s[i])
	}
	buf = append(buf, ']')
	return buf
}

func (s Strings) AppendFormat(buf []byte) []byte {
	buf = append(buf, '[')
	for i := range s {
		if i > 0 {
			buf = append(buf, ',')
		}
		buf = strconv.AppendQuote(buf, s[i])
	}
	buf = append(buf, ']')
	return buf
}

func (s Bytes) AppendFormat(buf []byte) []byte {
	buf = append(buf, '0', 'x')
	for i := range s {
		h, l := s[i]>>4, s[i]&0xF
		buf = append(buf, hex[h], hex[l])
	}
	return buf
}
